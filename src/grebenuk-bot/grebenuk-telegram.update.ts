import { HttpService } from "@nestjs/axios";
import { Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import axios from "axios";
import * as fs from "fs";
import { Action, Ctx, Hears, InjectBot, On, Update } from "nestjs-telegraf";
import * as os from "os";
import * as path from "path";
import { Context, Markup, Telegraf } from "telegraf";
import { PrismaService } from "../prisma.service";
import { GrebenukBotService } from "./grebenuk-bot.service";

interface SessionData {
  userId: string;
  telegramId: string;
  currentObjectionId?: string;
  currentObjectionText?: string;
  currentCategoryId?: string;
  awaitingObjectionTopic: boolean;
  lastVoiceText?: string;
  hasAnsweredCurrentObjection?: boolean;
  currentObjectionErrors?: string[];
  currentGrebenukResponse?: string;
  state?: "awaiting_objection_topic" | "awaiting_response";
}

interface TelegrafContext extends Context {
  session?: SessionData;
}

@Update()
@Injectable()
export class GrebenukTelegramUpdate {
  private readonly logger = new Logger(GrebenukTelegramUpdate.name);
  private readonly sessions: Map<number, SessionData> = new Map();
  private readonly tempDir: string;

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly prisma: PrismaService,
    private readonly grebenukBotService: GrebenukBotService,
    private readonly configService: ConfigService,
    private readonly httpService: HttpService,
  ) {
    this.tempDir = path.join(os.tmpdir(), "grebenuk-bot");
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
  }

  @Hears("/start")
  async onStart(ctx: Context) {
    const telegramId = ctx.from.id.toString();

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      let user = await this.prisma.user.findUnique({
        where: { telegramId },
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!user) {
        user = await this.prisma.user.create({
          data: {
            telegramId,
          },
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      this.sessions.set(ctx.from.id, {
        userId: user.id,
        telegramId,
        awaitingObjectionTopic: false,
        hasAnsweredCurrentObjection: false,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      await ctx.replyWithPhoto(
        { source: "./src/assets/start.jpg" },
        {
          caption:
            "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–ì—Ä–µ–±–µ–Ω—é–∫–∞! üî•\n\n" +
            "–•–æ—á–µ—à—å —Ä–∞—Å—Ç–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –∏ –Ω–µ —Ç—É–ø–∏—Ç—å? –ñ–º–∏ –°–¢–ê–†–¢.\n" +
            "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –û–Ω –≤—Å—Ç—Ä—è—Ö–Ω–µ—Ç —Ç–µ–±—è, –¥–∞—Å—Ç —á–µ—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –±–∏–∑–Ω–µ—Å—É üíº, " +
            "–ø—Ä–æ–∫–∞—á–∞–µ—Ç —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –Ω–µ –¥–∞—Å—Ç —Å–ª–∏—Ç—å—Å—è.\n\n" +
            "‚ö° –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–±–æ—Ä—É –ø–æ–ª–µ—Ç–æ–≤? –ñ–º–∏ –°–¢–ê–†–¢! üöÄ",
          parse_mode: "HTML",
          ...Markup.keyboard([
            ["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"],
            ["üí∞ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ"],
            ["ü§ù –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–æ–≤–µ—Ä–∏—é"],
            ["‚è± –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"],
            ["üõí –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"],
            ["‚öôÔ∏è –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"],
            ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è"],
          ]).resize(),
        },
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
   */
  @Hears("üí∞ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ")
  @Hears("ü§ù –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–æ–≤–µ—Ä–∏—é")
  @Hears("‚è± –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏")
  @Hears("üõí –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")
  @Hears("‚öôÔ∏è –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
  async onCategorySelect(ctx: Context) {
    if (!ctx.message || !("text" in ctx.message)) {
      return;
    }

    const text = ctx.message.text;
    const telegramId = ctx.from.id.toString();
    const session = this.getOrCreateSession(ctx);

    try {
      let categoryId: string | undefined;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      if (text.includes("—Ü–µ–Ω–µ")) {
        const category = await this.prisma.objectionCategory.findUnique({
          where: { name: "–¶–µ–Ω–∞" },
        });
        categoryId = category?.id;
      } else if (text.includes("–¥–æ–≤–µ—Ä–∏—é")) {
        const category = await this.prisma.objectionCategory.findUnique({
          where: { name: "–î–æ–≤–µ—Ä–∏–µ" },
        });
        categoryId = category?.id;
      } else if (text.includes("—Å—Ä–æ—á–Ω–æ—Å—Ç–∏")) {
        const category = await this.prisma.objectionCategory.findUnique({
          where: { name: "–°—Ä–æ—á–Ω–æ—Å—Ç—å" },
        });
        categoryId = category?.id;
      } else if (text.includes("–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")) {
        const category = await this.prisma.objectionCategory.findUnique({
          where: { name: "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å" },
        });
        categoryId = category?.id;
      } else if (text.includes("—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")) {
        const category = await this.prisma.objectionCategory.findUnique({
          where: { name: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å" },
        });
        categoryId = category?.id;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ª—é–±–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ
      const objection = await this.grebenukBotService.getRandomObjection(categoryId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      session.currentObjectionId = objection.id;
      session.currentObjectionText = objection.text;
      session.currentCategoryId = categoryId;
      session.hasAnsweredCurrentObjection = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–≤–µ—Ç–∞

      await ctx.reply(`üó£ <b>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n"${objection.text}"\n\n` + `–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`, {
        parse_mode: "HTML",
        ...Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"
   */
  @Hears("üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ")
  async onRandomObjection(ctx: Context) {
    const telegramId = ctx.from.id.toString();
    const session = this.getOrCreateSession(ctx);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ
      const objection = await this.grebenukBotService.getRandomObjection();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      session.currentObjectionId = objection.id;
      session.currentObjectionText = objection.text;
      session.currentCategoryId = objection.categoryId;
      session.hasAnsweredCurrentObjection = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–≤–µ—Ç–∞

      await ctx.reply(`üó£ <b>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n"${objection.text}"\n\n` + `–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`, {
        parse_mode: "HTML",
        ...Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
   */
  @Hears("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  async onMainMenu(ctx: Context) {
    try {
      await ctx.reply(
        "üöÄ –¢—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö\n" +
          "–ê–≤—Ç–æ—Ä –∏–¥–µ–∏: @besdenis | –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @holfizz\n\n" +
          "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ —è –¥–∞–º –≤–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Å—Ç–∏–ª–µ –ú–∏—Ö–∞–∏–ª–∞ –ì—Ä–µ–±–µ–Ω—é–∫–∞ üéØ",
        Markup.keyboard([
          ["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"],
          ["üí∞ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ", "ü§ù –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–æ–≤–µ—Ä–∏—é"],
          ["‚è± –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏", "üõí –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"],
          ["‚öôÔ∏è –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"],
          ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è"],
        ]).resize(),
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è"]]).resize());
    }
  }

  @Hears("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è")
  async onGenerateObjectionsMenu(@Ctx() ctx: Context) {
    try {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ª—é–±–∞—è' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã:");

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
      const session = this.getOrCreateSession(ctx);
      session.awaitingObjectionTopic = true;
      session.state = "awaiting_objection_topic";

      return;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π: ${error.message}`);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
   */
  async onObjectionTopicMessage(ctx: Context, message: string): Promise<void> {
    try {
      const session = this.getOrCreateSession(ctx);
      session.awaitingObjectionTopic = false;
      session.state = "awaiting_response";

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "–ª—é–±–∞—è", —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ç–µ–º—É
      const topic = message.toLowerCase() === "–ª—é–±–∞—è" ? "–æ–±—â–∞—è" : message;

      await ctx.reply(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã "${topic}"...`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
      const result = await this.grebenukBotService.sendCozeRequest(topic);

      if (!result.success || !result.objection) {
        await ctx.reply(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ: ${result.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
          Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
        );
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ
      session.currentObjectionText = result.objection;
      session.currentObjectionId = null;
      session.hasAnsweredCurrentObjection = false;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(`üó£ <b>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n"${result.objection}"\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`, {
        parse_mode: "HTML",
        ...Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã –¥–ª—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π: ${error.message}`);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async onTextResponse(ctx: Context) {
    if (!ctx.message || !("text" in ctx.message)) {
      return;
    }

    const text = ctx.message.text;
    const session = this.getOrCreateSession(ctx);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
    if (
      text.startsWith("üéØ") ||
      text.startsWith("üí∞") ||
      text.startsWith("ü§ù") ||
      text.startsWith("‚è±") ||
      text.startsWith("üõí") ||
      text.startsWith("‚öôÔ∏è") ||
      text.startsWith("ü§ñ") ||
      text.startsWith("üîÑ") ||
      text.startsWith("üè†")
    ) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if (session.state === "awaiting_objection_topic") {
      await this.onObjectionTopicMessage(ctx, text);
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ awaiting_response, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ
    if (!session || !session.currentObjectionText) {
      await ctx.reply(
        "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.",
        Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      );
      return;
    }

    try {
      await ctx.reply("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç...");
      const user = await this.prisma.user.findUnique({ where: { telegramId: ctx.from.id.toString() } });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Coze API —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∏ userId
      const cozeResponse = await this.grebenukBotService.processTextWithCoze(text, session.currentObjectionText, user.id);

      let replyMessage = `üó£ <b>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:</b>\n${session.currentObjectionText}\n\n`;
      let grebenukResponse = cozeResponse;
      let errors = [];

      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-–æ—Ç–≤–µ—Ç
      if (cozeResponse.trim().startsWith("{")) {
        try {
          const parsedResponse = JSON.parse(cozeResponse);
          if (parsedResponse.errors) {
            errors = parsedResponse.errors;
          }
          if (parsedResponse.grebenuk_response) {
            grebenukResponse = parsedResponse.grebenuk_response;
          }
        } catch (parseError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç
          grebenukResponse = cozeResponse;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (errors.length > 0) {
        replyMessage += `‚ö†Ô∏è <b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>\n`;
        errors.forEach((error, index) => {
          replyMessage += `${index + 1}. ${error}\n`;
        });
        replyMessage += "\n";
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(replyMessage, { parse_mode: "HTML" });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –ì—Ä–µ–±–µ–Ω—é–∫–∞
      if (grebenukResponse) {
        try {
          console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ–∑–≤—É—á–∫—É: "${grebenukResponse}"`);
          const audioBuffer = await this.grebenukBotService.synthesizeSpeech(grebenukResponse);

          if (audioBuffer && audioBuffer.length > 0) {
            console.log(`–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: ${audioBuffer.length} –±–∞–π—Ç`);
            await ctx.sendVoice(
              { source: audioBuffer },
              {
                caption: "üë®‚Äçüè´ –û—Ç–≤–µ—Ç –ì—Ä–µ–±–µ–Ω—é–∫–∞:\n<blockquote expandable>" + grebenukResponse + "</blockquote>",
                parse_mode: "HTML",
                ...Markup.inlineKeyboard([[Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "try_again")]]),
              },
            );
          } else {
            // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await ctx.reply("üë®‚Äçüè´ –û—Ç–≤–µ—Ç –ì—Ä–µ–±–µ–Ω—é–∫–∞:\n" + grebenukResponse, {
              parse_mode: "HTML",
              ...Markup.inlineKeyboard([[Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "try_again")]]),
            });
          }
        } catch (ttsError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏: ${ttsError.message}`);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ TTS –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
          await ctx.reply("üë®‚Äçüè´ –û—Ç–≤–µ—Ç –ì—Ä–µ–±–µ–Ω—é–∫–∞:\n" + grebenukResponse, {
            parse_mode: "HTML",
            ...Markup.inlineKeyboard([[Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "try_again")]]),
          });
        }
      }

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize());
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  @On("voice")
  async onVoice(@Ctx() ctx: any) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
      if (!ctx.message.voice) {
        ctx.reply("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const session = this.getOrCreateSession(ctx);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—É—â–µ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ
      if (!session.currentObjectionText) {
        await ctx.reply(
          "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.",
          Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
        );
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
      const processingMessage = await ctx.reply("üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");

      try {
        // –ü–æ–ª—É—á–∞–µ–º file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const fileId = ctx.message.voice.file_id;
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, file_id: ${fileId}`);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const fileLink = await ctx.telegram.getFileLink(fileId);
        console.log(`–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${fileLink}`);

        // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const response = await axios.get(fileLink, { responseType: "arraybuffer" });
        const audioBuffer = Buffer.from(response.data);
        const user = await this.prisma.user.findUnique({ where: { telegramId: ctx.from.id.toString() } });
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
        const result = await this.grebenukBotService.processVoiceMessage(audioBuffer, session.currentObjectionText, user.id);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏–∏
        session.lastVoiceText = result.transcribedText;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        if (result.transcribedText.includes("–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")) {
          await ctx.reply(`‚ö†Ô∏è ${result.transcribedText}`);
          return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        let replyMessage = `üé§ <b>–í—ã —Å–∫–∞–∑–∞–ª–∏:</b>\n${result.transcribedText}\n\n`;
        replyMessage += `üó£ <b>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:</b>\n${session.currentObjectionText}\n\n`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(replyMessage, { parse_mode: "HTML" });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (result.processedText.trim().startsWith("{") && (result.processedText.includes("errors") || result.processedText.includes("grebenuk_response"))) {
          try {
            const parsedResponse = JSON.parse(result.processedText);
            const errors = parsedResponse.errors || [];
            const grebenukResponse = parsedResponse.grebenuk_response || "";

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (errors.length > 0) {
              replyMessage = `‚ö†Ô∏è <b>–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>\n`;
              errors.forEach((error, index) => {
                replyMessage += `${index + 1}. ${error}\n`;
              });
              replyMessage += "\n";
              await ctx.reply(replyMessage, { parse_mode: "HTML" });
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –ì—Ä–µ–±–µ–Ω—é–∫–∞
            if (grebenukResponse) {
              try {
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ–∑–≤—É—á–∫—É: "${grebenukResponse}"`);
                const audioBuffer = await this.grebenukBotService.synthesizeSpeech(grebenukResponse);

                if (audioBuffer && audioBuffer.length > 0) {
                  await ctx.sendVoice(
                    { source: audioBuffer },
                    {
                      caption: "üë®‚Äçüè´ –û—Ç–≤–µ—Ç –ì—Ä–µ–±–µ–Ω—é–∫–∞:\n<blockquote expandable>" + grebenukResponse + "</blockquote>",
                      parse_mode: "HTML",
                      ...Markup.inlineKeyboard([[Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "try_again")]]),
                    },
                  );
                } else {
                  // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                  await ctx.reply("üë®‚Äçüè´ –û—Ç–≤–µ—Ç –ì—Ä–µ–±–µ–Ω—é–∫–∞:\n" + grebenukResponse, {
                    parse_mode: "HTML",
                    ...Markup.inlineKeyboard([[Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "try_again")]]),
                  });
                }
              } catch (ttsError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏: ${ttsError.message}`);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ TTS –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                await ctx.reply("üë®‚Äçüè´ –û—Ç–≤–µ—Ç –ì—Ä–µ–±–µ–Ω—é–∫–∞:\n" + grebenukResponse, {
                  parse_mode: "HTML",
                  ...Markup.inlineKeyboard([[Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "try_again")]]),
                });
              }
            }
          } catch (parseError) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-–æ—Ç–≤–µ—Ç–∞: ${parseError.message}`);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            await ctx.reply(result.processedText);
          }
        } else {
          // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
          await ctx.sendVoice(
            { source: result.audioBuffer },
            {
              caption: "üë®‚Äçüè´ –û—Ç–≤–µ—Ç –ì—Ä–µ–±–µ–Ω—é–∫–∞:\n<blockquote expandable>" + result.processedText + "</blockquote>",
              parse_mode: "HTML",
              ...Markup.inlineKeyboard([[Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "try_again")]]),
            },
          );
        }
      } finally {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        try {
          await ctx.telegram.deleteMessage(ctx.chat.id, processingMessage.message_id);
        } catch (deleteError) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${deleteError.message}`);
        }
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑"
   */
  @Action("try_again")
  async onTryAgain(@Ctx() ctx: TelegrafContext) {
    try {
      const session = this.getOrCreateSession(ctx);

      if (!session.currentObjectionText) {
        await ctx.answerCbQuery("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
      const lastHistory = await this.prisma.chatHistory.findFirst({
        where: { userId: session.userId },
        orderBy: { createdAt: "desc" },
        select: {
          objectionText: true,
          userResponse: true,
          botResponse: true,
        },
      });

      if (lastHistory) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        session.currentObjectionText = lastHistory.objectionText;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–≤–µ—Ç–∞
      session.hasAnsweredCurrentObjection = false;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
      await ctx.reply(
        `üó£ <b>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n"${session.currentObjectionText}"\n\n` +
          (lastHistory ? `üìù <b>–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±—ã–ª:</b>\n"${lastHistory.userResponse}"\n\n` + `üë®‚Äçüè´ <b>–ú–∏—Ö–∞–∏–ª –æ—Ç–≤–µ—Ç–∏–ª:</b>\n"${lastHistory.botResponse}"\n\n` : "") +
          `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`,
        {
          parse_mode: "HTML",
          ...Markup.keyboard([["üéØ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ"], ["ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize(),
        },
      );

      // –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if ("callback_query" in ctx.update && ctx.update.callback_query.message) {
        try {
          await ctx.telegram.editMessageReplyMarkup(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id, undefined, { inline_keyboard: [] });
        } catch (error) {
          this.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:", error.message);
        }
      }

      await ctx.answerCbQuery("‚úÖ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ!");
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: ${error.message}`);
      await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  }

  private getOrCreateSession(ctx: Context): SessionData {
    const session = this.sessions.get(ctx.from.id);
    if (session) {
      return session;
    } else {
      const newSession: SessionData = {
        userId: "",
        telegramId: "",
        awaitingObjectionTopic: false,
        hasAnsweredCurrentObjection: false,
      };
      this.sessions.set(ctx.from.id, newSession);
      return newSession;
    }
  }
}
